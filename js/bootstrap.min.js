!function(t, e) {
  "object" == typeof exports && "undefined" != typeof module ? e(exports, require("jquery"), require("popper.js")) :
  "function" == typeof define && define.amd ? define(["exports", "jquery", "popper.js"], e) :
  e((t = t || self).bootstrap = {}, t.jQuery, t.Popper)
}(this, function(t, g, u) {
  "use strict";

  var r = "button",
      a = "bs.button",
      c = "." + a,
      h = g.fn[r],
      f = {
        CLICK_DATA_API: "click" + c + ".data-api"
      },
      d = function() {
        function i(t) {
          this._element = t
        }
        var t = i.prototype;
        return t.toggle = function() {
          var t = !0,
              e = !0,
              n = g(this._element).closest('[data-toggle="buttons"]')[0];
          if (n) {
            var i = this._element.querySelector('input:not([type="hidden"])');
            if (i) {
              if ("radio" === i.type)
                if (i.checked && this._element.classList.contains("active")) t = !1;
                else {
                  var o = n.querySelector(".active");
                  o && g(o).removeClass("active")
                }
              else "checkbox" === i.type ? "LABEL" === this._element.tagName && i.checked === this._element.classList.contains("active") && (t = !1) : t = !1;
              t && (i.checked = !this._element.classList.contains("active"), g(i).trigger("change")), i.focus(), e = !1
            }
          }
          this._element.hasAttribute("disabled") || this._element.classList.contains("disabled") || (e && this._element.setAttribute("aria-pressed", !this._element.classList.contains("active")), t && g(this._element).toggleClass("active"))
        }, t.dispose = function() {
          g.removeData(this._element, a), this._element = null
        }, i._jQueryInterface = function(n) {
          return this.each(function() {
            var t = g(this),
                e = t.data(a);
            e || (e = new i(this), t.data(a, e)), "toggle" === n && e[n]()
          })
        }, s(i, null, [{
          key: "VERSION",
          get: function() {
            return "4.4.1"
          }
        }]), i
      }();
  g(document).on(f.CLICK_DATA_API, '[data-toggle^="button"]', function(t) {
    var e = t.target;
    if (!g(e).hasClass("btn") && (e = g(e).closest(".btn")[0]), !e || e.hasAttribute("disabled") || e.classList.contains("disabled")) t.preventDefault();
    else {
      var n = e.querySelector('input:not([type="hidden"])');
      if (n && (n.hasAttribute("disabled") || n.classList.contains("disabled"))) return void t.preventDefault();
      d._jQueryInterface.call(g(e), "toggle")
    }
  }).on(f.FOCUS_BLUR_DATA_API, '[data-toggle^="button"]', function(t) {
    var e = g(t.target).closest(".btn")[0];
    g(e).toggleClass("focus", /^focus(in)?$/.test(t.type))
  }), g.fn[r] = d._jQueryInterface, g.fn[r].Constructor = d, g.fn[r].noConflict = function() {
    return g.fn[r] = h, d._jQueryInterface
  };

  var y = "grid",
      E = "bs.grid",
      C = "." + E,
      T = g.fn[y],
      b = "resize" + C,
      S = "click" + C,
      D = function() {
        function n(t) {
          this._element = t
        }
        return n.prototype.attach = function(t) {
          g(this._element).hasClass("grid") || g(this._element).addClass("grid"), this._element.style.gridTemplateColumns = "repeat(auto-fill, minmax(" + t + "px, 1fr))"
        }, n._jQueryInterface = function(e) {
          return this.each(function() {
            var t = g(this).data(E);
            t || (t = new n(this), g(this).data(E, t)), "attach" === e && t[e].apply(t, Array.prototype.slice.call(arguments, 1))
          })
        }, s(n, null, [{
          key: "VERSION",
          get: function() {
            return "4.4.1"
          }
        }]), n
      }();
  g(window).on(b, function() {
    g('[data-toggle="grid"]').each(function() {
      D._jQueryInterface.call(g(this), "attach", 150)
    })
  }), g.fn[y] = D._jQueryInterface, g.fn[y].Constructor = D, g.fn[y].noConflict = function() {
    return g.fn[y] = T, D._jQueryInterface
  };
});